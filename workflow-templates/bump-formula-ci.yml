name: Bump Formula CI

on:
  release:
    types: [released]

env:
  TAP_REPO_OWNER: ${{ github.repository_owner }}
  TAP_REPO_NAME: homebrew-public

jobs:
  examine-release:
    name: Examine the release
    runs-on: ubuntu-latest
    steps:
      - name: Exract release info
        id: release-info
        shell: python3 {0}
        run: |
          import os, re, sys

          # Extract tag name
          tag_name = re.match(
              r"^(?:refs/tags/(?P<tag>.*))",
              os.environ['GITHUB_REF']
          ).group("tag")

          print("tag of the release: {tag_name}".format(tag_name=tag_name))
          print("::set-output name=tag::{tag_name}".format(tag_name=tag_name))

          # NOTE: some repositories don't use SemVer scheme
          # Extracts version, excludes prerelease
          version_match = re.match(r"^v?(?P<version>\d[\d\.]*)", tag_name)

          if version_match:
              version = version_match.group("version")
              print("version: {version}".format(version=version))
              print("::set-output name=version::{version}".format(version=version))
          else:
              err_msg = "Release tag does not look like a version tag."
              print("::error::{err_msg}".format(err_msg=err_msg))
              sys.exit(err_msg)

      - name: Checkout tap repo
        id: checkout-tap-repo
        run: |
          brew tap $TAP_REPO_OWNER/$TAP_REPO_NAME
          echo "::set-output name=tap_git_dir::$(brew --repo $TAP_REPO_OWNER/$TAP_REPO_NAME)"

      - name: Search formula by URL
        id: search-formula
        env:
          TAP_GIT_DIR: ${{ steps.checkout-tap-repo.outputs.tap_git_dir }}
        shell: python3 {0}
        run: |
          import os, re, sys, pathlib, concurrent.futures

          url_regex = re.compile(
              r"^ *url +(?P<quote_type>[\"\'])https://github\.com/{repo_path}/".format(repo_path=os.environ['GITHUB_REPOSITORY']) + \
              r"(?:(?P<archive>archive)|(?P<release>releases/download))/" \
              r"(?P<tag>v?(?P<version>\d[\d\.]*))" \
              r"(?(archive)|(?(release)/(?P=REPO_NAME)\-(?P=version)|))\.(?:tar\.gz|zip)(?P=quote_type)$",
              lib_repo,
              re.MULTILINE,
          )

          def inspect_formula(path):
              """Search for fomulas with matching asset URL"""
              with path.open(mode='r') as f:
                  formula_match = url_regex.search(f.read())
              if formula_match:
                  print("found formula at: {path}".format(path=path))
                  return (path, formula_match)
              else:
                  return False

          formula_paths = list(pathlib.Path(os.environ['TAP_GIT_DIR'], "Formula").glob("*.rb"))
          with concurrent.futures.ThreadPoolExecutor(max_workers=None) as executor:
              matched_formulas = [path for path in executor.map(inspect_formula, formula_paths, chunksize=1) if path not False]

          if len(matched_formulas) == 0:
              err_msg = "Formula with matching asset URL is not found."
              print("::error::{err_msg}".format(err_msg=err_msg))
              sys.exit(err_msg)

          elif len(matched_formulas) > 1:
              print("::group::Found multiple formulas having qualifying URL")
              for f in matched_formulas:
                  print(f.name)
              print("::endgroup::")
              print("::warning::Will only use the first one.")

          # Set outputs
          formula_filepath, formula_match = matched_formulas[0]
          print("::set-output name=formula_path::{filepath}".format(filepath=formula_filepath))
          print("::set-output name=formula_name::{name}".format(name=formula_filepath.stem))

          formula_group = formula_match.groupdict()
          if formula_group.get("archive"):
              print("::set-output name=url_type::archive")
          elif formula_group.get("release"):
              print("::set-output name=url_type::release")
          else:
              err_msg = "Formula parser matched some undocumented URL format."
              print("::error::{err_msg}".format(err_msg=err_msg))
              sys.exit(err_msg)
